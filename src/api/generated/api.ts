/* tslint:disable */
/* eslint-disable */
/**
 * hackathon23 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'point': number;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    'report'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'user': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
    /**
     * 空文字列 (\'\') またはundefinedの場合: レスポンス形式が text/html で、ログイン成功時は204を返す  それ以外の場合: レスポンス形式が text/plain 形式で、ログイン成功時は200を返す 
     * @type {string}
     * @memberof LoginRequest
     */
    'statusOnly'?: string;
    /**
     * deprecated (statusOnlyを使ってください) 
     * @type {string}
     * @memberof LoginRequest
     */
    'status_only'?: string;
}
/**
 * 
 * @export
 * @interface Ranking
 */
export interface Ranking {
    /**
     * 
     * @type {string}
     * @memberof Ranking
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Ranking
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Ranking
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface TimeCard
 */
export interface TimeCard {
    /**
     * 
     * @type {string}
     * @memberof TimeCard
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof TimeCard
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeCard
     */
    'Itemid'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {Array<UserDatasetInner>}
     * @memberof User
     */
    'dataset'?: Array<UserDatasetInner>;
}
/**
 * 
 * @export
 * @interface UserDatasetInner
 */
export interface UserDatasetInner {
    /**
     * 
     * @type {number}
     * @memberof UserDatasetInner
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDatasetInner
     */
    'date'?: string;
    /**
     * 
     * @type {Array<Item>}
     * @memberof UserDatasetInner
     */
    'itemList'?: Array<Item>;
}
/**
 * 
 * @export
 * @interface UserPublic
 */
export interface UserPublic {
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    'id'?: string;
    /**
     * 
     * @type {Array<UserPublicDatasetInner>}
     * @memberof UserPublic
     */
    'dataset'?: Array<UserPublicDatasetInner>;
}
/**
 * 
 * @export
 * @interface UserPublicDatasetInner
 */
export interface UserPublicDatasetInner {
    /**
     * 
     * @type {number}
     * @memberof UserPublicDatasetInner
     */
    'point'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserPublicDatasetInner
     */
    'date'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログインを行います。 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * ログインを行います。 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * ログインを行います。 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(loginRequest?: LoginRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * ログインを行います。 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(loginRequest?: LoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 全項目の一覧を取得します 
         * @param {boolean} [includeSuspended] 無効にされたアイテムも必要か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet: async (includeSuspended?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeSuspended !== undefined) {
                localVarQueryParameter['include-suspended'] = includeSuspended;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 項目を追加 
         * @param {string} title タイトル
         * @param {string} description 説明 
         * @param {ItemPostScoreEnum} score 点数 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPost: async (title: string, description: string, score: ItemPostScoreEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('itemPost', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('itemPost', 'description', description)
            // verify required parameter 'score' is not null or undefined
            assertParamExists('itemPost', 'score', score)
            const localVarPath = `/item`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (score !== undefined) {
                localVarQueryParameter['score'] = score;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 項目を報告 
         * @param {string} item アイテムUUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemReportPut: async (item: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('itemReportPut', 'item', item)
            const localVarPath = `/item/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (item !== undefined) {
                localVarQueryParameter['item'] = item;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * 全項目の一覧を取得します 
         * @param {boolean} [includeSuspended] 無効にされたアイテムも必要か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemGet(includeSuspended?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Item>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemGet(includeSuspended, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 項目を追加 
         * @param {string} title タイトル
         * @param {string} description 説明 
         * @param {ItemPostScoreEnum} score 点数 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemPost(title: string, description: string, score: ItemPostScoreEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemPost(title, description, score, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 項目を報告 
         * @param {string} item アイテムUUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemReportPut(item: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemReportPut(item, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * 全項目の一覧を取得します 
         * @param {boolean} [includeSuspended] 無効にされたアイテムも必要か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemGet(includeSuspended?: boolean, options?: any): AxiosPromise<Array<Item>> {
            return localVarFp.itemGet(includeSuspended, options).then((request) => request(axios, basePath));
        },
        /**
         * 項目を追加 
         * @param {string} title タイトル
         * @param {string} description 説明 
         * @param {ItemPostScoreEnum} score 点数 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemPost(title: string, description: string, score: ItemPostScoreEnum, options?: any): AxiosPromise<Item> {
            return localVarFp.itemPost(title, description, score, options).then((request) => request(axios, basePath));
        },
        /**
         * 項目を報告 
         * @param {string} item アイテムUUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemReportPut(item: string, options?: any): AxiosPromise<Item> {
            return localVarFp.itemReportPut(item, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * 全項目の一覧を取得します 
     * @param {boolean} [includeSuspended] 無効にされたアイテムも必要か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemGet(includeSuspended?: boolean, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemGet(includeSuspended, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 項目を追加 
     * @param {string} title タイトル
     * @param {string} description 説明 
     * @param {ItemPostScoreEnum} score 点数 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemPost(title: string, description: string, score: ItemPostScoreEnum, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemPost(title, description, score, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 項目を報告 
     * @param {string} item アイテムUUID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemReportPut(item: string, options?: AxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemReportPut(item, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ItemPostScoreEnum = {
    Great: 'great',
    Good: 'good',
    Bad: 'bad',
    Terrible: 'terrible'
} as const;
export type ItemPostScoreEnum = typeof ItemPostScoreEnum[keyof typeof ItemPostScoreEnum];


/**
 * TimeCardApi - axios parameter creator
 * @export
 */
export const TimeCardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タイムカードの削除 
         * @param {string} uuid ユーザーのuUID 
         * @param {string} tuid タイトルのuUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timecardDeletePost: async (uuid: string, tuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('timecardDeletePost', 'uuid', uuid)
            // verify required parameter 'tuid' is not null or undefined
            assertParamExists('timecardDeletePost', 'tuid', tuid)
            const localVarPath = `/timecard/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (tuid !== undefined) {
                localVarQueryParameter['tuid'] = tuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeCardApi - functional programming interface
 * @export
 */
export const TimeCardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeCardApiAxiosParamCreator(configuration)
    return {
        /**
         * タイムカードの削除 
         * @param {string} uuid ユーザーのuUID 
         * @param {string} tuid タイトルのuUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timecardDeletePost(uuid: string, tuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timecardDeletePost(uuid, tuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeCardApi - factory interface
 * @export
 */
export const TimeCardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeCardApiFp(configuration)
    return {
        /**
         * タイムカードの削除 
         * @param {string} uuid ユーザーのuUID 
         * @param {string} tuid タイトルのuUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timecardDeletePost(uuid: string, tuid: string, options?: any): AxiosPromise<TimeCard> {
            return localVarFp.timecardDeletePost(uuid, tuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimeCardApi - object-oriented interface
 * @export
 * @class TimeCardApi
 * @extends {BaseAPI}
 */
export class TimeCardApi extends BaseAPI {
    /**
     * タイムカードの削除 
     * @param {string} uuid ユーザーのuUID 
     * @param {string} tuid タイトルのuUID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeCardApi
     */
    public timecardDeletePost(uuid: string, tuid: string, options?: AxiosRequestConfig) {
        return TimeCardApiFp(this.configuration).timecardDeletePost(uuid, tuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TimecardApi - axios parameter creator
 * @export
 */
export const TimecardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タイムカードの追加 
         * @param {string} uuid ユーザーのuUID 
         * @param {string} tuid タイトルのuUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timecardPost: async (uuid: string, tuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('timecardPost', 'uuid', uuid)
            // verify required parameter 'tuid' is not null or undefined
            assertParamExists('timecardPost', 'tuid', tuid)
            const localVarPath = `/timecard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            if (tuid !== undefined) {
                localVarQueryParameter['tuid'] = tuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimecardApi - functional programming interface
 * @export
 */
export const TimecardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimecardApiAxiosParamCreator(configuration)
    return {
        /**
         * タイムカードの追加 
         * @param {string} uuid ユーザーのuUID 
         * @param {string} tuid タイトルのuUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timecardPost(uuid: string, tuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeCard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timecardPost(uuid, tuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimecardApi - factory interface
 * @export
 */
export const TimecardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimecardApiFp(configuration)
    return {
        /**
         * タイムカードの追加 
         * @param {string} uuid ユーザーのuUID 
         * @param {string} tuid タイトルのuUID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timecardPost(uuid: string, tuid: string, options?: any): AxiosPromise<TimeCard> {
            return localVarFp.timecardPost(uuid, tuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimecardApi - object-oriented interface
 * @export
 * @class TimecardApi
 * @extends {BaseAPI}
 */
export class TimecardApi extends BaseAPI {
    /**
     * タイムカードの追加 
     * @param {string} uuid ユーザーのuUID 
     * @param {string} tuid タイトルのuUID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimecardApi
     */
    public timecardPost(uuid: string, tuid: string, options?: AxiosRequestConfig) {
        return TimecardApiFp(this.configuration).timecardPost(uuid, tuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザの日ごとの合計点を取得します 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザの日ごとの合計点を取得します 
         * @param {string} uid ユーザーID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (uid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getUser', 'uid', uid)
            const localVarPath = `/user/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全ユーザーを取得します。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [number] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRankingGet: async (number?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/ranking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザの日ごとの合計点を取得します 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザの日ごとの合計点を取得します 
         * @param {string} uid ユーザーID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(uid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 全ユーザーを取得します。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserPublic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [number] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userRankingGet(number?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ranking>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userRankingGet(number, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * ユーザの日ごとの合計点を取得します 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<User> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザの日ごとの合計点を取得します 
         * @param {string} uid ユーザーID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(uid: string, options?: any): AxiosPromise<User> {
            return localVarFp.getUser(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 全ユーザーを取得します。 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<UserPublic>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [number] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRankingGet(number?: number, options?: any): AxiosPromise<Array<Ranking>> {
            return localVarFp.userRankingGet(number, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * ユーザの日ごとの合計点を取得します 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザの日ごとの合計点を取得します 
     * @param {string} uid ユーザーID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(uid: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全ユーザーを取得します。 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [number] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userRankingGet(number?: number, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userRankingGet(number, options).then((request) => request(this.axios, this.basePath));
    }
}



